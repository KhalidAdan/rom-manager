// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Settings {
  id                      Int       @id @default(autoincrement())
  onboardingComplete      DateTime?
  showCategoryRecs        Boolean   @default(true)
  showDiscovery           Boolean   @default(true)
  spotlightIncompleteGame Boolean   @default(true)

  @@map("settings")
}

model Role {
  id        Int         @id @default(autoincrement())
  title     String      @unique // CHECK CONSTRAINT FOR [ADMIN, MODERATOR, VIEWER]
  // relations
  users     User[]
  gameStats GameStats[]

  @@map("roles")
}

model System {
  id        Int     @id @default(autoincrement())
  title     String  @unique // CHECK CONSTRAINT FOR [GB, GBC, GBA, SNES] 
  extension String
  image     String?
  game      Game[]

  @@map("systems")
}

model Game {
  id              Int       @id @default(autoincrement())
  title           String
  releaseDate     Int? // Epoch time
  coverArt        Bytes?
  backgroundImage Bytes?
  fileName        String // the literal file's name
  file            Bytes?
  summary         String?
  completedAt     DateTime? // track when you beat or are done with a game
  created_at      DateTime  @default(now())
  updated_at      DateTime? @default(now())
  rating          Int?

  // relations
  systemId   Int          @map("system_id")
  system     System       @relation(fields: [systemId], references: [id], onDelete: Cascade)
  GameStats  GameStats[]
  gameGenres GameGenres[]

  borrowedBy User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     Int?  @map("user_id")

  @@map("games")
}

model GameGenres {
  id      Int   @id @default(autoincrement())
  gameId  Int
  genreId Int
  game    Game  @relation(fields: [gameId], references: [id], onDelete: Cascade)
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@map("game_genre")
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String @unique

  // relations
  gameGenres GameGenres[]

  @@map("genres")
}

model User {
  id               Int         @id @default(autoincrement())
  email            String      @unique
  password         String // hashed before saving
  created_at       DateTime    @default(now())
  updated_at       DateTime?   @default(now())
  signupVerifiedAt DateTime?
  // relations
  roleId           Int
  role             Role        @relation(fields: [roleId], references: [id])
  sessions         Session[]
  gameStats        GameStats[]
  Game             Game[]

  @@map("users")
}

model Session {
  id      Int      @id @default(autoincrement())
  expires DateTime
  //
  userId  Int      @map("user_id")
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade) //in Db add check constraint

  @@map("sessions")
}

model GameStats {
  id            Int      @id @default(autoincrement())
  lastPlayedAt  DateTime
  totalPlayTime Int      @default(0) // in seconds, sent with unload event in /play
  // relations
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameId        Int
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  Role          Role?    @relation(fields: [roleId], references: [id])
  roleId        Int?

  @@unique([userId, gameId])
  @@map("game_stats")
}
