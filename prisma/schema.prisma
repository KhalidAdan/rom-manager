// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Settings {
  id                 Int       @id @default(autoincrement())
  romFolderLocation  String
  onboardingComplete DateTime?

  @@map("settings")
}

model Role {
  id        Int         @id @default(autoincrement())
  title     String      @unique // CHECK CONSTRAINT FOR [ADMIN, MODERATOR, VIEWER]
  // relations
  users     User[]
  gameStats GameStats[]

  @@map("roles")
}

model System {
  id        Int     @id @default(autoincrement())
  title     String  @unique // CHECK CONSTRAINT FOR [GB, GBC, GBA, SNES] 
  extension String
  image     String?
  game      Game[]

  @@map("systems")
}

model Game {
  id              Int       @id @default(autoincrement())
  title           String
  releaseDate     Int // Epoch time
  coverArt        String?
  backgroundImage String?
  file            Bytes? // GBA games just happen to be 16384KB and that seems to be perfect for read performance! https://www.sqlite.org/intern-v-extern-blob.html
  summary         String
  completedAt     DateTime? // track when you beat or are done with a game
  created_at      DateTime  @default(now())
  updated_at      DateTime? @default(now())

  // relations
  systemId  Int         @map("system_id")
  system    System      @relation(fields: [systemId], references: [id])
  genres    Genre[]
  GameStats GameStats[]

  @@map("games")
}

model Genre {
  id     Int    @id @default(autoincrement())
  name   String
  // relations
  gameId Int
  games  Game   @relation(fields: [gameId], references: [id])

  @@map("genres")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String // hashed before saving
  created_at DateTime    @default(now())
  updated_at DateTime?   @default(now())
  // relations
  roleId     Int
  role       Role        @relation(fields: [roleId], references: [id])
  sessions   Session[]
  gameStats  GameStats[]

  @@map("users")
}

model Session {
  id      Int      @id @default(autoincrement())
  expires DateTime
  //
  userId  Int      @map("user_id")
  user    User     @relation(fields: [userId], references: [id]) //in Db add check constraint

  @@map("sessions")
}

model GameStats {
  id            Int      @id @default(autoincrement())
  lastPlayedAt  DateTime
  totalPlayTime Int      @default(0) // in seconds, sent with unload event in /play
  // relations
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  gameId        Int
  game          Game     @relation(fields: [gameId], references: [id])
  Role          Role?    @relation(fields: [roleId], references: [id])
  roleId        Int?

  @@unique([userId, gameId])
  @@map("game_stats")
}
